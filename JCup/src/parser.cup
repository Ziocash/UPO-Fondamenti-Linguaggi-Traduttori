/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup;

import java_cup.runtime.*;
import cup.Lexer;
import cup.symboltable.*;
import java.io.IOException;
import java.io.FileReader;
import java.io.File;
import javax.swing.JFileChooser;

parser code {:

 	protected Lexer lexer;
	private static final String ALPHABET = "abcdefghijklmnopqrstuvwxyz";
	private StringBuilder code;
	private StringBuilder logger;
	private static int registerIndex = 0;
	private static char[] register = ALPHABET.toCharArray();

	public Parser(Lexer lexer) {this.lexer = lexer;}

	/**
     * Returns {@code true} if the visitor found errors in visited AST.
     * 
     * @return {@code true} if has errors in AST, otherwise {@code false}.
     */
    public boolean hasErrors() {
        return !logger.toString().isEmpty();
    }

    /**
     * Returns a string representing all errors found in the AST.
     * 
     * @return a string representing all errors found in the AST.
     */
    public String getLoggerString() {
        return logger.toString();
    }

	/**
     * <p>
     * Gets a char to identify the register associated to a variable.
     * </p>
     * 
     * <p>
     * Increments automatically the register index.
     * </p>
     * 
     * @return a char that identifies the register.
     */
    private static char newRegister() {
        return register[registerIndex++];
    }

	/**
     * Inserts a space in the code stringbuilder.
     */
    private void insertSpace() {
        code.append(" ");
    }

	/**
     * Returns the trimmed code.
     * 
     * @return the trimmed code.
     */
    public String getCode() {
        return code.toString().trim();
    }

	/**
     * <p>
     * Checks if two {@link TypeDescriptor}s are compatible.
     * </p>
     * <p>
     * Returns {@code true} if types are compatible, otherwise {@code false}.
     * </p>
     * 
     * @param t1 the variable type that will receive expression value.
     * @param t2 the expression type that will be assigned to variable.
     * @return {@code true} if types are compatible, otherwise {@code false}.
     */
    private boolean isCompatible(TypeDescriptor t1, TypeDescriptor t2) {
        return ((t1.equals(TypeDescriptor.FLOAT) && t2.equals(TypeDescriptor.INT)) || t1.equals(t2))
                && t1 != TypeDescriptor.ERROR && t2 != TypeDescriptor.ERROR;
    }

	/**
     * <p>
     * Adds an operator to generated code.
     * </p>
     * <p>
     * Returns {@code ERROR} if types are incompatible, otherwise {@code INT} or {@code FLOAT} depending on operands.
     * </p>
     * 
	 * @param operator the operator that needs to be added to code.
     * @param t1 the variable type that will receive expression value.
     * @param t2 the expression type that will be assigned to variable.
     * @return {@code ERROR} if types are incompatible or already containing an error, otherwise {@code INT} or {@code FLOAT} depending on operands.
     */
	private TypeDescriptor appendOperation(String operator, TypeDescriptor t1, TypeDescriptor t2) {
		if(!isCompatible(t1, t2)) {
			logger.append(String.format("BinaryOperation: Incompatible types: \'%s\' and \'%s\'.%n", t1, t2));
			return TypeDescriptor.ERROR;
		} else {
			if(t1.equals(TypeDescriptor.INT)) {
				code.append(operator);
				insertSpace();
				return t1;
			} else {
				code.append("5 k ");
				code.append(operator);
				insertSpace();
				return TypeDescriptor.FLOAT;
			}			
		}
	}

	/**
     * <p>
     * Adds a value to generated code.
     * </p>
     * 
	 * @param value the value that will be pushed into code
     */
	private void appendValue(String value) {
		code.append(value);
		insertSpace();
	}

	/**
     * <p>
     * Checks if a variable is already declared.
     * </p>
     * 
	 * @param id variable id that needs to be checked.
	 * @return {@code true} and adds an error to logger if a variable is already declared, otherwise {@code false}.
     */
	 private boolean declaredVariable(String id) {
		if(SymbolTable.lookup(id) != null) {
			logger.append(String.format("Declaration: variable \'%s\' already declared.%n", id));
			return true;
		}
		return false;
	 }

	 /**
     * <p>
     * Checks if a variable is not declared.
     * </p>
     * 
	 * @param id variable id that needs to be checked.
	 * @return {@code true} and adds an error to logger if a variable is not declared, otherwise {@code false}.
     */
	 private boolean undeclaredVariable(String id) {
		if(SymbolTable.lookup(id) == null) {
			logger.append(String.format("Variable: variable \'%s\' is not declared.%n", id));
			return true;
		}
		return false;
	 }

:}

/* define how to connect to the scanner! */
init with {:
	SymbolTable.init();
	code = new StringBuilder();
	logger = new StringBuilder();
	ComplexSymbolFactory f = new ComplexSymbolFactory();
	symbolFactory = f;
	FileReader reader = null;
	try {
		JFileChooser chooser = new JFileChooser(new File(".").getCanonicalPath());
		int value = chooser.showOpenDialog(null);
		File file = null;
		if(value == JFileChooser.APPROVE_OPTION) {
			file = new File(chooser.getSelectedFile().getAbsolutePath());
		}
		reader = new FileReader(file);
	} catch (Exception e) {
		e.printStackTrace();
	} 
	lexer = new Lexer(f,reader);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal 			SEMI, DIVIDE, TIMES, PLUS, MINUS, ASSIGN; /* Operations */
terminal 			TYINT, TYFLOAT, PRINT; /* Types */
terminal String     ID, INT, FLOAT; /* Values */

/* Non terminals */
non terminal TypeDescriptor Prg, DSs, Dcl, Stm, Exp, Val;

/* Precedences */
precedence right	PLUS, MINUS;
precedence right   	TIMES, DIVIDE;

/* The grammar rules */
Prg	::=  DSs: dss 						{: RESULT = dss; :};
DSs ::= Dcl : dcl DSs					{: RESULT = dcl; :}
		| Stm : stm DSs 				{: RESULT = stm; :}
		|								{:    //no op    :} //This point is used for EOF
		;

// Declarations behaviour

Dcl ::= TYFLOAT ID : id SEMI			{:
											if(!declaredVariable(id)) {
												SymbolTable.enter(id, new Attributes(TypeDescriptor.FLOAT));
												RESULT = TypeDescriptor.FLOAT;
												SymbolTable.lookup(id).setRegister(newRegister());
											}
											else
												RESULT = TypeDescriptor.ERROR;
										:}
		| TYINT ID : id SEMI			{:
											if(!declaredVariable(id)) {
												SymbolTable.enter(id, new Attributes(TypeDescriptor.INT));
												RESULT = TypeDescriptor.INT;
												SymbolTable.lookup(id).setRegister(newRegister());
											}
											else
												RESULT = TypeDescriptor.ERROR;
										:}
		;

// Statements behaviour

Stm ::= ID : id ASSIGN Exp : e SEMI		{:
											if(!undeclaredVariable(id)) {
												if (isCompatible(SymbolTable.lookup(id).getType(), e)) {
													RESULT = SymbolTable.lookup(id).getType();
													char s = SymbolTable.lookup(id).getRegister();
													code.append("s" + s);
													insertSpace();
													code.append("0 k");
													insertSpace();
												} else {
													logger.append(String.format("BinaryOperation: Expected type FLOAT and INT for expressions, but was \'%s\' and \'%s\'.%n", SymbolTable.lookup(id).getType(), e));
													RESULT = TypeDescriptor.ERROR;
												}
											}
											else
												RESULT = TypeDescriptor.ERROR;
										:}
		| PRINT ID : id SEMI			{:
											if(!undeclaredVariable(id)) {
												code.append("l" + SymbolTable.lookup(id).getRegister() + " p P ");
												RESULT = SymbolTable.lookup(id).getType();
											}
										:}
		;

// Expression evaluation

Exp ::= Exp : e1 PLUS Exp : e2			{: RESULT = appendOperation("+", e1, e2); :}
		| Exp : e1 MINUS Exp : e2		{: RESULT = appendOperation("-", e1, e2); :}
		| Exp : e1 DIVIDE Exp : e2 		{: RESULT = appendOperation("/", e1, e2); :}
		| Exp : e1 TIMES Exp : e2 		{: RESULT = appendOperation("*", e1, e2); :}
		| Val : v						{: RESULT = v; :}
		;

// Value evalution between INT FLOAT and ID

Val ::= INT : i 						{:	RESULT = TypeDescriptor.INT; appendValue(i); :}
		| FLOAT : f 					{:	RESULT = TypeDescriptor.FLOAT; appendValue(f); :}
		| ID : id 						{:	
											if(!undeclaredVariable(id)) { 
												RESULT = SymbolTable.lookup(id).getType();
												code.append("l" + SymbolTable.lookup(id).getRegister());
												insertSpace();
											}
											else
												RESULT = TypeDescriptor.ERROR;
										:}
		;